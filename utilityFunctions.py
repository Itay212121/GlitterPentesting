import json

"""
This function gets the username of a user by its id
@param socket - the opened socket with the server
@param id - the id of the user
@return the username of the user
"""


def getUsername(socket, id):
    data = '350#{gli&&er}{"screen_name":"aaaaaa","avatar":"im1","description":"ddaddaada","privacy":"Public","id":%d,"user_name":"iadadad","password":"a","gender":"Male","mail":"a@gmail.com"}##' % (
        id)
    res = send_to_server(data, socket)
    # extracting the username from the start of the response
    return res[len("359#Invalid session for username: "): res.index("{gli&&er}")]


"""
This function logs in to an account
@param username - the username of the user
@param password - the password of the user
@param sock - the opened socket with the server

@return a dictionary contains information about the logged user, or -1 if it failed
"""


def login(username, password, sock):
    data = '100#{gli&&er}{"user_name":"%s","password":"%s","enable_push_notifications":true}##' % (
        username, password)

    res = send_to_server(data, sock)
    if "Login received" not in res:
        return -1
    checksum_ascii = '110#{gli&&er}%d##' % (
        sum([ord(i) for i in username + password]))
    res = send_to_server(checksum_ascii, sock)

    if "Authentication approved" in res:
        return stringToDict(res)
    return -1


"""
This function searches for users with a specific screen_name
@param socket - the opened socket with the server
@param screen_name - the screen_name of the user
@return an array with all of the found users
"""


def getUsers(socket, screen_name):
    data = '300#{gli&&er}{"search_type":"SIMPLE","search_entry":"%s"}##' % (
        screen_name)
    res = send_to_server(data, socket)
    return stringToDict(res)


"""
This function sends data to the server and returnes the response
@param data - the data to be send to the server
@param socket - the opened socket with the server
@return the response from the server
"""


def send_to_server(data, sock):

    sock.sendall(data.encode())

    res = sock.recv(1024 * 15).decode()

    return res


"""
This function convert a glitter response into an accessable dictionary
@param res - the data to be converted
@return a dictionary with the json information
"""


def stringToDict(res):
    return json.loads(res[res.index("{gli&&er}") + len('{gli&&er}'): -3])


"""
This function gets the glit of a specific user
@param socket - the opened socket with the server
@param user - a dictionary contains information about the user
@return an array contains all the glits of that user
"""


def getUserGlits(socket, user):
    data = '500#{gli&&er}{"feed_owner_id":%d,"end_date":"%s","glit_count":20}##' % (
        user["id"], user["date"])
    res = send_to_server(data, socket)
    # print(res)
    return stringToDict(res)
